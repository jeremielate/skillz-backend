// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x51\x6f\xd3\x3e\x14\xc5\x9f\x93\x4f\x71\xff\x7e\xd8\x52\xa9\x6b\xaa\xbf\x78\x40\x25\xc9\x03\x5b\x45\x41\x1b\x9b\x68\x91\xe0\xd1\x4b\xee\x12\x6f\xae\x1d\xec\x9b\xd0\x50\xf5\xbb\x23\xc7\xc9\x58\x11\x83\x3d\xb5\xf2\x3d\xe7\x77\xaf\x4f\xae\x9c\xfc\x77\x71\x7d\xbe\xf9\x7a\xb3\x84\x8a\xb6\x32\x0b\x93\xf1\x07\x79\x91\x85\x41\x42\x82\x24\x66\x17\xa2\x2c\x85\x82\xf5\x83\x90\xf2\x07\x9c\xc1\xa5\xce\xb9\x04\x42\x4b\x42\x95\x60\xd1\xb4\x68\x92\xd8\x6b\xc3\x24\xf6\xe6\xe4\x56\x17\x9d\x63\x08\x55\x37\x04\xd4\xd5\x98\x32\xc2\x1d\x31\xa8\x25\xcf\xb1\xd2\xb2\x40\x93\xb2\x8a\xa8\x5e\xc4\xb1\x74\xcc\x4a\x5b\x5a\xbc\x9e\xcf\xe7\x31\x03\x51\xa4\xac\x31\x92\x41\x9c\x25\xb7\x06\xe2\x17\xa0\xde\x2d\x37\xde\xb7\x45\xaa\x74\x71\x64\x75\x72\x6e\x90\x1f\x39\x4e\xf7\xec\x5c\x2b\x42\x45\x67\x9b\xae\x46\xb6\x00\xc6\x6b\x29\x72\x4e\x42\xab\xf8\xde\x6a\xc5\x0e\xa7\x3d\xd1\xdd\x09\x8d\x65\x59\x12\x8f\xa4\x7f\xb3\xb7\x68\x2d\x2f\x7b\xec\x0a\xa5\xd4\x23\xac\xe0\xc4\xff\x4c\xba\x6d\x88\xb4\x02\xad\x72\x29\xf2\x87\x94\x59\x54\x45\x34\x61\xd9\x52\xb5\xba\x73\x21\x7b\x81\x93\x16\xa2\xed\x61\x06\x6d\xad\x95\x45\x07\x2c\x44\xeb\x4a\x36\x37\xa2\x7e\x9a\x53\x7c\xcf\x5b\xee\x4f\x59\x16\x06\x77\x8d\xca\xdd\x0d\xc1\xe3\x61\x1f\x06\x41\xcb\x0d\xec\x2a\x03\x29\x28\xfc\x0e\x5f\xae\x2e\x57\x44\xf5\x27\xfc\xd6\xa0\xa5\x68\xf2\x66\x50\x34\x46\x42\x0a\xfb\x3d\xcc\x3e\x1b\x09\x87\x83\x3b\xdf\x55\x66\xa6\x6b\x54\x11\xbb\xb9\x5e\x6f\xd8\xd4\x89\xa6\x40\xa6\xc1\xc9\x58\xb6\x48\x03\x6a\xd5\xe7\x18\x1d\xc7\x3e\x75\xb1\xff\x96\xfb\xa3\x57\x2b\x83\xbc\xe8\x2c\x71\xc2\xbc\xe2\xaa\x44\x48\xe1\xf1\x06\xc3\xf4\x81\xb8\x83\xc8\xa9\x7b\xed\xda\x69\x21\x4d\x53\x78\x05\x27\x27\xd0\x4f\x40\x9c\x1a\xdb\x9f\xfd\x3f\x9f\x0f\xa6\xa0\xd0\x79\xb3\x45\x45\xb3\x12\x69\x29\xd1\xfd\x7d\xdb\xbd\x2f\xa2\x5f\xa1\x4e\x66\x42\x29\x34\xab\xcd\xd5\x25\xa4\xe0\x3b\xf8\xd2\x06\x77\xe4\x66\x0c\x0e\x61\x10\x1c\xc6\x80\xdc\xa7\x85\x14\x3e\xac\xaf\x3f\xce\x2c\x19\xa1\x4a\x71\xd7\x45\x7d\xb7\xc6\xc8\x05\x3c\xdb\xd1\xad\xfa\x64\xd6\x72\xd9\xe0\xd4\xa9\xfd\x0a\xff\xc5\x30\xec\xf8\x53\xcf\xb0\xa4\x0b\xdf\xbe\xe6\xc6\x62\xf4\xac\x7f\xdc\xe8\x01\x30\xe9\x09\x6e\xfc\x97\xd9\xfb\x1d\x1e\xbd\x2e\x81\x27\x1f\x5b\x15\x91\x2b\xbb\x93\x43\x18\x24\xb1\xdf\x3c\xf7\x34\xf8\x37\x21\x89\xfd\x33\xf3\x33\x00\x00\xff\xff\xb7\x39\x44\xd6\x7e\x04\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1523754125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

