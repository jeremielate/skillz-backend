// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x6f\xd3\x30\x14\x7d\x4e\x7e\xc5\xc5\x0f\x5b\x2a\x75\x4d\x85\x78\x40\x25\xc9\x03\x5b\x45\x41\x1b\x9b\x68\x91\xe0\xd1\x8b\xef\x12\x6f\xae\x1d\xec\x9b\xd0\x50\xf5\xbf\x23\xe7\x63\x74\x08\x06\x4f\xad\xee\x3d\xe7\xf8\xde\xe3\x13\x27\x2f\x2e\xae\xcf\x37\x5f\x6f\x96\x50\xd2\x56\x65\x61\x32\xfe\x20\x17\x59\x18\x24\x24\x49\x61\x76\x21\x8b\x42\x6a\x58\x3f\x48\xa5\x7e\xc0\x19\x5c\x9a\x9c\x2b\x20\x74\x24\x75\x01\x0e\x6d\x83\x36\x89\x7b\x6c\x98\xc4\x3d\x39\xb9\x35\xa2\xf5\x1a\x52\x57\x35\x01\xb5\x15\xa6\x8c\x70\x47\x0c\x2a\xc5\x73\x2c\x8d\x12\x68\x53\x56\x12\x55\x8b\x38\x56\x5e\xb3\x34\x8e\x16\xaf\xe7\xf3\x79\xcc\x40\x8a\x94\xd5\x56\x31\x88\xb3\xe4\xd6\x42\xfc\x1f\x52\xef\x96\x9b\x9e\xb7\x45\x2a\x8d\x78\x42\xf5\x70\x6e\x91\x3f\x61\x9c\xee\xd9\xb9\xd1\x84\x9a\xce\x36\x6d\x85\x6c\x01\x8c\x57\x4a\xe6\x9c\xa4\xd1\xf1\xbd\x33\x9a\x1d\x4e\x3b\x45\xbf\x13\x5a\xc7\xb2\x24\x1e\x95\xfe\xad\xbd\x45\xe7\x78\xd1\xc9\xae\x50\x29\x33\x8a\x09\x4e\xfc\xcf\x4a\xb7\x35\x91\xd1\x60\x74\xae\x64\xfe\x90\x32\x87\x5a\x44\x13\x96\x2d\x75\x63\x5a\x6f\x72\x0f\xf0\x50\x21\x9b\x4e\xcc\xa2\xab\x8c\x76\xe8\x05\x85\x6c\x7c\xcb\xe5\x56\x56\xc7\x3e\xc5\xf7\xbc\xe1\x7d\x95\x65\x61\x70\x57\xeb\xdc\x6f\x08\xbd\x3c\xec\xc3\x20\x68\xb8\x85\x5d\x69\x21\x05\x8d\xdf\xe1\xcb\xd5\xe5\x8a\xa8\xfa\x84\xdf\x6a\x74\x14\x4d\xde\x0c\x88\xda\x2a\x48\x61\xbf\x87\xd9\x67\xab\xe0\x70\xf0\xf5\x5d\x69\x67\xa6\x42\x1d\xb1\x9b\xeb\xf5\x86\x4d\x3d\x68\x0a\x64\x6b\x9c\x8c\x6d\x87\x34\x48\xad\x3a\x1f\xa3\xa7\xb6\x4f\xbd\xed\xbf\xf9\xfe\xc8\x35\xda\x22\x17\xad\x23\x4e\x98\x97\x5c\x17\x08\x29\x3c\x6e\x30\x4c\x1f\xc8\x3b\x88\x3c\xba\xc3\xae\x3d\x16\xd2\x34\x85\x57\x70\x72\x02\xdd\x04\xc4\xa9\x76\x5d\xed\xe5\x7c\x3e\x90\x02\x61\xf2\x7a\x8b\x9a\x66\x05\xd2\x52\xa1\xff\xfb\xb6\x7d\x2f\xa2\x5f\xa6\x4e\x66\x52\x6b\xb4\xab\xcd\xd5\x25\xa4\xd0\x9f\xd0\xb7\x36\xb8\x23\x3f\x63\x70\x08\x83\xe0\x30\x1a\xe4\xaf\x16\x52\xf8\xb0\xbe\xfe\x38\x73\x64\xa5\x2e\xe4\x5d\x1b\x75\xa7\xd5\x56\x2d\xe0\xaf\x27\xfa\xa8\x4f\x66\x0d\x57\x35\x4e\x3d\xba\x8f\xf0\x33\x84\x21\xe3\xc7\x9c\x21\xa4\xcf\x90\xc6\x18\x1f\xb3\xfc\xc8\xcf\x50\xba\xb0\x0e\x78\xbf\xe9\xd1\xa5\x6a\x11\xf9\xae\xaf\x1c\xc2\x20\x89\xfb\x84\xf9\x27\xa0\xff\xf6\x93\xb8\x7f\x4e\x7e\x06\x00\x00\xff\xff\xff\x89\xa7\xd7\x66\x04\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 1126, mode: os.FileMode(420), modTime: time.Unix(1523753657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

