// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\x5f\x6f\xd3\x3c\x14\xc6\xaf\xd3\x4f\x71\x5e\x5f\x6c\xa9\xd4\xd5\xd5\x2b\x2e\x50\x49\x7a\xc1\x36\x51\x50\xc7\xa6\xb5\x48\x70\xe9\xc5\x67\x89\x87\x6b\x07\xfb\x24\x34\x54\xfd\xee\xc8\xf9\x03\x1d\x82\xc2\x55\xab\x73\x7e\xcf\x63\xfb\xf8\x71\x92\xff\xae\x6e\x2f\x37\x9f\xee\xae\xa1\xa0\xad\x5e\x8c\x92\xe1\x07\x85\x5c\x8c\xa2\x84\x14\x69\x5c\x5c\xa9\x3c\x57\x06\xd6\x9f\x95\xd6\xdf\xe0\x02\x56\x36\x13\x1a\x08\x3d\x29\x93\x83\x47\x57\xa3\x4b\x78\xc7\x8e\x12\xde\x89\x93\x07\x2b\x9b\xe0\xa1\x4c\x59\x11\x50\x53\x62\xca\x08\x77\xc4\xa0\xd4\x22\xc3\xc2\x6a\x89\x2e\x65\x05\x51\x39\xe7\x5c\x07\xcf\xc2\x7a\x9a\xbf\x9c\xcd\x66\x9c\x81\x92\x29\xab\x9c\x66\xc0\x17\xc9\x83\x03\xfe\x0f\x56\x6f\xae\x37\x9d\x6e\x8b\x54\x58\xf9\x4c\x1a\x70\xe1\x50\x3c\x53\x9c\xef\xd9\xa5\x35\x84\x86\x2e\x36\x4d\x89\x6c\x0e\x4c\x94\x5a\x65\x82\x94\x35\xfc\xc9\x5b\xc3\x0e\xe7\xad\x63\x38\x13\x3a\xcf\x16\x09\x1f\x9c\xfe\xee\xbd\x45\xef\x45\xde\xda\x2e\x51\x6b\x3b\x98\x49\x41\xe2\xf7\x4e\x52\xd5\x2d\xe1\xd0\x97\xd6\x78\x0c\x94\x54\x75\x68\xf9\xcc\xa9\xf2\xf8\xf0\xfc\x49\xd4\xa2\xab\xb2\xc5\x28\x8a\x6a\xe1\x60\x57\x38\x48\xc1\xe0\x57\xf8\x78\xb3\x5a\x12\x95\xf7\xf8\xa5\x42\x4f\xf1\xf8\x55\x4f\x54\x4e\x43\x0a\xfb\x3d\x7c\xb8\x5f\xc1\xe1\x10\xca\xbb\xc2\x4d\x6d\x89\x26\x66\x77\xb7\xeb\x0d\x9b\x04\x66\x02\xe4\x2a\x1c\x0f\x6d\x8f\xd4\x3b\x2d\xdb\x41\xc4\xcf\xe7\x36\x09\x73\xfb\x65\x70\x3f\xb4\xd6\x38\x14\xb2\xf1\x24\x08\xb3\x42\x98\x1c\x21\x85\xc7\xca\x64\x81\x85\x78\x0c\xfb\x51\x14\x45\xea\x11\xe2\x40\xb7\xec\x3a\xb0\x90\xa6\x29\xbc\x80\xb3\x33\x68\x77\x40\x82\x2a\xdf\xd6\xfe\x9f\xcd\x7a\x51\x24\x6d\x56\x6d\xd1\xd0\x34\x47\xba\xd6\x18\xfe\xbe\x6e\xde\xca\xf8\xe7\x00\xc7\x53\x65\x0c\xba\xe5\xe6\x66\x05\x29\x74\x2b\x74\xad\x0d\xee\x28\xec\x31\x3a\x8c\xa2\xe8\x30\xcc\x27\xdc\x0d\xa4\xf0\x6e\x7d\xfb\x7e\xea\xc9\x29\x93\xab\xc7\x26\x6e\x57\xab\x9c\x9e\xc3\x1f\x57\x0c\x59\x1d\x4f\x6b\xa1\x2b\x9c\x04\xba\xcb\xe0\x09\x41\x1f\xd2\x63\x4d\x9f\xb2\x13\xa2\x21\x87\xc7\xaa\xb0\xe5\x13\x92\x36\x6d\x3d\x1f\x4e\x7a\x74\xa9\x46\xc6\xa1\x1b\x2a\x09\xef\xa2\x14\x1e\x70\xf7\x72\x13\xde\x7d\x0c\xbe\x07\x00\x00\xff\xff\xe8\x24\x15\xbc\x24\x04\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 1060, mode: os.FileMode(420), modTime: time.Unix(1523750207, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

